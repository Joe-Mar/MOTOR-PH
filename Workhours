import java.io.*;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.*;



public class WorkHours { 
     private int employeeId;
    private String date;
    private double regularHours;
    private double overtimeHours;
    private double lateMinutes;
    private double lateDeduction;

    private static final String FILE_NAME = "C:\\Users\\lasic\\OneDrive\\Documents\\NetBeansProjects\\MOTOR-PH\\build\\classes\\motor\\resources\\attendance_data.csv";
    private static final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    private static final DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("H:mm");

    public WorkHours(int employeeId, String date, double regularHours, double overtimeHours, double lateMinutes, double lateDeduction) {
        this.employeeId = employeeId;
        this.date = date;
        this.regularHours = regularHours;
        this.overtimeHours = overtimeHours;
        this.lateMinutes = lateMinutes;  //  Added this
        this.lateDeduction = lateDeduction;
    }

    public int getEmployeeId() {
        return employeeId;
    }

    public String getDate() {
        return date;
    }

    public double getRegularHours() {
        return regularHours;
    }

    public double getOvertimeHours() {
        return overtimeHours;
    }

    public double getLateMinutes() {
        return lateMinutes;
    }

    public double getLateDeduction() {
        return lateDeduction;
    }

    public static List<WorkHours> computeWorkHours() {
        List<WorkHours> workHoursList = new ArrayList<>();
        List<String[]> data = readCSV(FILE_NAME);

        for (String[] row : data) {
            try {
                int empId = Integer.parseInt(row[0]);
                LocalDate date = LocalDate.parse(row[3], dateFormatter);
                LocalTime login = LocalTime.parse(row[4], timeFormatter);
                LocalTime logout = LocalTime.parse(row[5], timeFormatter);

                // Determine shift start time (rounds down to nearest hour)
                int shiftHour = (login.getMinute() > 10) ? login.getHour() : Math.max(8, login.getHour());
                LocalTime shiftStart = LocalTime.of(shiftHour, 0);

                // Calculate late minutes if logged in past grace period (8:11 or later)
                long lateMinutes = login.isAfter(shiftStart.plusMinutes(10)) ? Duration.between(shiftStart, login).toMinutes() : 0;
                
                // Calculate total work hours
                double totalWorkHours = (double) Duration.between(login, logout).toMinutes() / 60;

                // Separate regular and overtime hours
                double regularHours = Math.min(8, totalWorkHours);
                double overtimeHours = Math.max(0, totalWorkHours - 8);

                // Compute late deduction based on hourly rate (placeholder)
                double hourlyRate = 100; // Replace this with actual calculation
                double lateDeduction = (hourlyRate / 60) * lateMinutes;

                workHoursList.add(new WorkHours(empId, row[3], regularHours, overtimeHours, lateMinutes, lateDeduction));

            } catch (Exception e) {
                System.out.println("Skipping invalid record: " + Arrays.toString(row) + " - Error: " + e.getMessage());
            }
        }
        return workHoursList;
    }

    public static double getTotalRegularHours(int empId, LocalDate startDate, LocalDate endDate) {
        return computeWorkHours().stream()
                .filter(wh -> wh.getEmployeeId() == empId && isDateInRange(wh.getDate(), startDate, endDate))
                .mapToDouble(WorkHours::getRegularHours)
                .sum();
    }

    public static double getTotalOvertimeHours(int empId, LocalDate startDate, LocalDate endDate) {
        return computeWorkHours().stream()
                .filter(wh -> wh.getEmployeeId() == empId && isDateInRange(wh.getDate(), startDate, endDate))
                .mapToDouble(WorkHours::getOvertimeHours)
                .sum();
    }

    public static double getTotalLateMinutes(int empId, LocalDate startDate, LocalDate endDate) {
        return computeWorkHours().stream()
                .filter(wh -> wh.getEmployeeId() == empId && isDateInRange(wh.getDate(), startDate, endDate))
                .mapToDouble(WorkHours::getLateMinutes)
                .sum();
    }

    public static double getTotalLateDeductions(int empId, LocalDate startDate, LocalDate endDate, double hourlyRate) {
        return computeWorkHours().stream()
                .filter(wh -> wh.getEmployeeId() == empId && isDateInRange(wh.getDate(), startDate, endDate))
                .mapToDouble(wh -> (hourlyRate / 60) * wh.getLateMinutes())  // âœ… Fixed: Used getLateMinutes()
                .sum();
    }

    private static boolean isDateInRange(String dateStr, LocalDate startDate, LocalDate endDate) {
        LocalDate date = LocalDate.parse(dateStr, dateFormatter);
        return (date.isEqual(startDate) || date.isAfter(startDate)) && date.isBefore(endDate.plusDays(1));
    }

    public static List<String[]> readCSV(String filePath) {
        List<String[]> data = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean firstLine = true;
            while ((line = reader.readLine()) != null) {
                if (firstLine) {
                    firstLine = false;
                    continue;
                }
                data.add(line.split(","));
            }
        } catch (IOException e) {
            System.out.println("Error reading CSV file: " + e.getMessage());
        }
        return data;
    }
}
